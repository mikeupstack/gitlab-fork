# frozen_string_literal: true

require 'spec_helper'

RSpec.describe Llm::ExplainVulnerabilityService, feature_category: :vulnerability_management do
  let_it_be(:user) { create(:user) }
  let_it_be(:project) { create(:project, :private) }
  let_it_be(:vulnerability) { create(:vulnerability, :with_finding, project: project) }
  let_it_be(:options) { {} }

  subject { described_class.new(user, vulnerability, options) }

  before do
    stub_feature_flags(openai_experimentation: true)
  end

  describe '#execute' do
    before do
      stub_feature_flags(explain_vulnerability: project)
      allow(Llm::CompletionWorker).to receive(:perform_async)
    end

    context 'when the user is permitted to view the vulnerability' do
      before do
        project.add_maintainer(user)
      end

      it 'schedules a job' do
        expect(subject.execute).to be_success

        expect(Llm::CompletionWorker).to have_received(:perform_async).with(
          user.id,
          vulnerability.id,
          'Vulnerability',
          :explain_vulnerability,
          options
        )
      end
    end

    context 'when the user is not permitted to view the vulnerability' do
      before do
        allow(project).to receive(:member?).with(user).and_return(false)
      end

      it 'returns an error' do
        expect(subject.execute).to be_error

        expect(Llm::CompletionWorker).not_to have_received(:perform_async)
      end
    end

    context 'when feature flag is disabled' do
      before do
        stub_feature_flags(explain_vulnerability: false)
      end

      it 'returns an error' do
        expect(subject.execute).to be_error

        expect(Llm::CompletionWorker).not_to have_received(:perform_async)
      end
    end
  end
end
