# frozen_string_literal: true

module Gitlab
  module Llm
    module OpenAi
      module Completions
        class ExplainVulnerability
          DEFAULT_ERROR = 'An unexpected error has occurred.'
          DIGIT_REGEX = /^\d$/

          def initialize(template_class)
            @template_class = template_class
          end

          def execute(user, vulnerability, _options)
            template = template_class.new(vulnerability)
            response = response_for(user, vulnerability, template)

            if tofa?(vulnerability)
              json = Gitlab::Json.parse(response, symbolize_names: true)

              GraphqlTriggers.ai_completion_response(
                user.to_global_id,
                vulnerability.to_global_id,
                {
                  id: SecureRandom.uuid,
                  model_name: vulnerability.class.name,
                  response_body: json.dig(*tofa_json_args),
                  errors: tofa_errors(json)
                }
              )
            else
              ::Gitlab::Llm::OpenAi::ResponseService
                .new(user, vulnerability, response, options: {})
                .execute(Gitlab::Llm::OpenAi::ResponseModifiers::Chat.new)
            end
          # or refresh token grant
          rescue StandardError => error
            Gitlab::ErrorTracking.track_exception(error)

            ::Gitlab::Llm::OpenAi::ResponseService
              .new(user, vulnerability, { error: { message: DEFAULT_ERROR } }.to_json, options: {})
              .execute
          end

          private

          attr_reader :template_class

          def response_for(user, vulnerability, template)
            client_class = client_class_for(vulnerability)
            client_class
              .new(user)
              .chat(content: template.to_prompt, **template.options(client_class))
          end

          def client_class_for(vulnerability)
            if tofa?(vulnerability)
              ::Gitlab::Llm::Tofa::Client
            else
              ::Gitlab::Llm::OpenAi::Client
            end
          end

          def tofa_json_args
            str = Gitlab::CurrentSettings.current_application_settings.tofa_response_json_keys
            str.split.map do |s|
              s.match?(DIGIT_REGEX) ? s.to_i : s.to_sym
            end
          end

          def tofa_errors(json)
            [json.dig(:error, :message)].compact
          end

          def tofa?(vulnerability)
            Feature.enabled?(:tofa_experimentation, vulnerability.project)
          end
        end
      end
    end
  end
end
